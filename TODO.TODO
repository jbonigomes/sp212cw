To ask Keith:

 ☐ Random Fleet needs more explanation, is it about randomly placing them in the ocean?
     Explanation in the code comments

 ☐ If a shot is fired where it was either a miss or hit before, what should happen? Should the shot count be increased?
     Let them shoot as many times as they want
     Be careful not to count a ship as sinking twice

 ☐ A sample on unit testing and how folder should be organized
     There should be a folder called test at the same level as bin and src, the tests should belong to the battleship package
     One new file per interface tested
     One test method for each method in the interface
     The import statements may give grief
     The prefered annotation is @Test
     when testing ocean we need to instanciate oc first and test the construction (does it consist of 10x10 with all cells being ship?)


 To code:

 ☐ Validate shot, to see if is not shooting at the same spot twice and user message
 ☐ Set the message when a ship is sunk
 ☐ Set the short form for the miss and hit


The UML:

--- ✄ -----------------------
Ocean
--- ✄ -----------------------
int UPPER
ship[][] board
int shotsFired
int hitCount
int shipSunk
--- ✄ -----------------------
getShotsFired
setShotsFired
getHitCount
setHitCount
getShipSunk
setShipSunk
getDimension
placeAllShipsRandomly
toString
isOccupied
shootAt
isGameOver
getShipArray
printFinalScores


--- ✄ -----------------------
Ship
--- ✄ -----------------------
int size
String type
String shortForm
int bowRow
int bowColumn
boolean horizontal
boolean[] hit
--- ✄ -----------------------
okToPlaceShipAt
placeShipAt
shootAt
isSunk
setShortForm
toString


